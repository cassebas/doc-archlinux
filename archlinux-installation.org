#+TITLE: Installing archlinux with encrypted disk
#+DATE:2016-12-03
#+STARTUP:showeverything

* Introduction
This is a small manual for installing Arch Linux. In this manual Arch
will be installed on a separate USB drive for booting Arch Linux on a
MacBook Air (without touching the internal disk).

Note that the Arch Linux wiki contains a whole lot more information
and explanations for choices that can be made. This simple document
only describes the installation for a particular set of choices that
have already been made.

* Preparation

** Download archlinux
Archlinux can be downloaded from [[https://www.archlinux.org/download/][archlinux.org]], either a BitTorrent
download or a direct HTTP download. Once downloaded, the download's
integrity should be verified. For this the signature also has to be
downloaded, e.g. [[https://www.archlinux.org/iso/2016.12.01/archlinux-2016.12.01-dual.iso.sig][archlinux-2016.12.01-dual.iso.sig]] (of the same file
ofcourse). Once both the download and the signature reside in the same
directory, verification can be done like so:
#+BEGIN_SRC shell
$ gpg --keyserver-options auto-key-retrieve --verify archlinux-<version>-dual.iso.sig
#+END_SRC

Note that this command gave me a failed verification with a warning on
Debian Jessie, because of not being able to find the public key. I
guess the auto-key-retrieve on Debian doesn't work like it does on Arch.

Or, if you're already running Arch, you can do:
#+BEGIN_SRC shell
pacman-key -v archlinux-<version>-dual.iso.sig
#+END_SRC

** Prepare installation media
The location of your USB drive can be determined by =dmesg= (right
after insterting it) or by =lsblk=.
#+BEGIN_SRC shell
# dd bs=4M if=/path/to/archlinux.iso of=/dev/sdx status=progress && sync
#+END_SRC

The =sync= is there to make sure all data is written to the drive
prior to removing it from your computer.

* Booting from the installation media
So the USB drive has been prepared, so connect it to the MacBook Air
and power cycle the laptop. Just before the mac is booting you must
press the right 'option' key (alt) until the boot menu is shown. It
should at least show your normal `Macintosh HD' and an extra `EFI
Boot', the latter being the Arch Linux installer. Select it using the
arrow keys and press =enter=. Arch will boot!

After a few seconds a shell is shown, I'm automatically logged into
the installer as =root=. Since we're on Mac, it should have booted in
EFI mode, lets check:
#+BEGIN_SRC shell
# ls /sys/firmware/efi/efivars
#+END_SRC

If this directory doens't exist, it'll have booted in BIOS mode.

The Arch Linux wiki now suggests working on the network configuration,
but since I'm on wifi on a Mac, I prefer to do that later.

** Partition the USB drive
Now I'm going to prepare the USB drive that I'm going to use for
Arch. It's a 64GB SanDisk Extreme drive, connected via USB 3.0, it
won't be as fast as the Mac's internal SSD but that's ok.

The Arch Linux wiki has a lot of information on disk encryption, check
[[https://wiki.archlinux.org/index.php/Disk_encryption][here]]. I'm going to use dm-crypt/LUKS together with LVM. There are
basically two ways to go about this:
1. install LVM on top of the encryption layer.
2. create an encyption layer on top of LVM.
Since I'm using a single USB drive on which Arch is going to be
installed, I'll choose the somewhat easer approach (the first one). 

The following partitions will be put on the drive:
- EFI System Partition (ESP) [1G, /boot]
- LVM [58G]
  - swap [4G]
  - root [54G]

I use gdisk for the partitioning. After inserting the USB stick, you
may want to verify to which device the target disk is mapped. Again,
find out by =lsblk= or =gdisk -l=.

In my case the device is =/dev/sdd=. I'm using =gdisk=, because I want
to use a GPT partition table:
#+BEGIN_SRC shell
# gdisk /dev/sdd
#+END_SRC

Create the partitions, in my case the result is:
| Number | Start (sector) | End (sector) | Size       | Code | Name       |
|--------+----------------+--------------+------------+------+------------|
|      1 |             34 |      2097185 | 1024.0 MiB | EF00 | EFI System |
|      3 |        2097186 |    122544482 | 57.4 GiB   | 8E00 | Linux LVM  |

The EFI System partition has to be formatted as FAT32. Do this like so:

#+BEGIN_SRC shell
# mkfs.fat -F32 /dev/sdd1
#+END_SRC

The Arch Linux [[https://wiki.archlinux.org/index.php/EFI_System_Partition][wiki]] talks about [[https://wiki.archlinux.org/index.php/EFISTUB][EFISTUB]] under the `Mount the
partition' heading. To my understanding this is an alternative to a
/conventional/ bootloader like =grub=, where the kernel can be loaded
as an EFI executable. In my setup I'll still use a bootloader and for
an easier installation I'll mount the ESP to =/boot=.

Now we can create the LVM on LUKS setup. First we prepare the
disk. The following command *irrevocably erases* data on the partition:
#+BEGIN_SRC shell
# cryptsetup luksFormat /dev/sdd2
#+END_SRC

Enter a [[https://wiki.archlinux.org/index.php/Security#Passwords][strong]] passphrase.

Now open the container:
#+BEGIN_SRC shell
# cryptsetup open --type luks /dev/sdd2 lvm
#+END_SRC
The decrypted container should now be available under
=/dev/mapper/lvm=.

** Make logical volumes with LVM
#+BEGIN_SRC shell
# pvcreate /dev/mapper/lvm
#+END_SRC
It should say ``Physical volume "/dev/mapper/lvm" successfully
created.'' Now create a volume group:
#+BEGIN_SRC shell
# vgcreate archbook-vg /dev/mapper/lvm
#+END_SRC
It should say ``Volume group "archbook-vg" successfully created''.
Create logical volumes:
#+BEGIN_SRC shell
# lvcreate -L 4G archbook-vg -n swap
# lvcreate -l 100%FREE archbook-vg -n root
#+END_SRC
This will create a logical volume of 4G for swap and a 54G logical
volume for the root. Note that my macbook has 8G RAM on board, so
that's plenty most of the times. Therefore adding 4G to the virtual
memory is more than enough (and I want to save some space on the flash
drive).

Prepare the new logical volume and swap:
#+BEGIN_SRC shell
# mkfs.ext4 /dev/mapper/archbook--vg-root
# mkswap /dev/mapper/archbook--vg-swap
#+END_SRC

Now mount the file systems:
#+BEGIN_SRC shell
# mount /dev/mapper/archbook--vg-root /mnt
# mkdir /mnt/boot
# mount /dev/sdd1 /mnt/boot
# swapon /dev/mapper/archbook--vg-swap
#+END_SRC

Now we can continue with the /normal/ installation procedure, until
the =mkinitcpio= step.

Edit the =/etc/pacman.d/mirrorlist= and optionally move your closest
mirrors to the top of the file. 

Now I'm pluggin' in a cable, hopefully I can get connected.! Wow, it
works!! My Thunderbolt network adapter is automagically recognized:)

** Installation and configuration
Update system clock:
#+BEGIN_SRC shell
# timedatectl set-ntp true
# timedatectl status
#+END_SRC

Now I can install the base packages:
#+BEGIN_SRC shell
# pacstrap /mnt base base-devel
#+END_SRC

Make a new fstab:
#+BEGIN_SRC shell
# genfstab -U /mnt >> /mnt/etc/fstab
#+END_SRC
We should check the result for errors, it seems ok. Now we can
=chroot= into the system.
#+BEGIN_SRC shell
# arch-chroot /mnt
#+END_SRC
Since we're in the chroot now, we can install extra packages using
=pacman=.
#+BEGIN_SRC shell
# pacman -S wireless_tools wpa_supplicant iw dialog vim
#+END_SRC

Set the time zone:
#+BEGIN_SRC shell
# ln -s /usr/share/zoneinfo/Europe/Amsterdam /etc/localtime
#+END_SRC
Run =hwclock= to generate =/etc/adjtime=.
#+BEGIN_SRC shell
# hwclock --systohc
#+END_SRC
*** Locale
Uncomment =en_US.UTF-8 UTF-8= (and other needed localizations) in
=/etc/locale.gen and generate with:
#+BEGIN_SRC shell
# locale-gen
#+END_SRC

Make a file =/etc/locale.conf= with content =LANG\=en_US.UTF-8=.

Create hostname in =/etc/hostname=. I'm choosing =macbookarch=.
Maybe add: "127.0.1.1   macbookarch.localdomain   macbookarch"

*** mkinitcpio
Now we have to modify the mkinitcpio config, since we're using lvm and
encryption. Edit =/etc/mkinitcpio.conf= and add =encrypt= and =lvm2=
to the =HOOKS= defintion.

I'm choosing systemd-boot as a bootloader. Let's configure this one
now. First, we must check if the =efivars= are loaded correctly. See
[[https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface#Requirements_for_UEFI_variable_support][here]] for what to check, in short (in the chroot'ed environment, I've
booted again with the Arch Installer):
#+BEGIN_SRC shell
# ls -al /sys/firmware/efi/efivars
# pacman -S efivar
# efivar -l
#+END_SRC

The first command should list a non-empty directory, the latter should list the efi variables without warning. There are other requirements listed, see the Arch wiki for that.

Install the =systemd= bootloader:
#+BEGIN_SRC shell
# bootctl --path=/boot install
#+END_SRC
Here =/boot= is the mountpoint for the ESP.

Since the macbook runs an Intel processor, we have to install the
Intel microcode.
#+BEGIN_SRC shell
# pacman -S intel-ucode
#+END_SRC


Make a boot entry for booting into Arch:
#+BEGIN_VERBOSE
title Arch Linux Encrypted LVM
linux /vmlinuz-linux
initrd /init-ucode.img
initrd /initramfs-linux.img
options cryptdevice=UUID=<UUID>:archbook--vg root=/dev/mapper/archbook--vg-root quiet rw
#+END_VERBOSE

To find out the id of the LUKS container, you can do:
#+BEGIN_SRC shell
# ls -l /dev/disk/by-id | grep CRYPT
#+END_SRC

Now we're ready to create a new /initramfs/:
#+BEGIN_SRC shell
# mkinitcpio -p linux
#+END_SRC

Set the root passwd:
#+BEGIN_SRC shell
# passwd
#+END_SRC

Now you're ready to reboot, fingers crossed:)
#+BEGIN_SRC shell
# exit
# umount -R /mnt
# shutdown -r now
#+END_SRC

If all went well, you can enter the passphrase after selecting the USB
stick for booting, and then Arch boots and greets you with a login
prompt.

* Post installation steps
Make sure that the dhcpcd service is started after booting:
#+BEGIN_SRC shell
# systemctl enable dhcpcd@ens9.service
#+END_SRC
Here =ens9= is the name of the network interface that I'm using (the
thunderbolt Ethernet adapter). Find out by:
#+BEGIN_SRC shell
# ip link
#+END_SRC
