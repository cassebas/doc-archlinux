#+TITLE: Installing archlinux with encrypted disk
#+DATE:2016-12-03
#+STARTUP:showeverything

* Introduction
This is a small manual for installing Arch Linux. In this manual Arch
will be installed on a separate USB drive for booting Arch Linux on a
MacBook Air (without touching the internal disk).

* Preparation

** Download archlinux
Archlinux can be downloaded from [[https://www.archlinux.org/download/][archlinux.org]], either a BitTorrent
download or a direct HTTP download. Once downloaded, the download's
integrity should be verified. For this the signature also has to be
downloaded, e.g. [[https://www.archlinux.org/iso/2016.12.01/archlinux-2016.12.01-dual.iso.sig][archlinux-2016.12.01-dual.iso.sig]] (of the same file
ofcourse). Once both the download and the signature reside in the same
directory, verification can be done like so:
#+BEGIN_SRC shell
$ gpg --keyserver-options auto-key-retrieve --verify archlinux-<version>-dual.iso.sig
#+END_SRC

Note that this command gave me a failed verification with a warning on
Debian Jessie, because of not being able to find the public key. I
guess the auto-key-retrieve on Debian doesn't work like it does on Arch.

Or, if you're already running Arch, you can do:
#+BEGIN_SRC shell
pacman-key -v archlinux-<version>-dual.iso.sig
#+END_SRC

** Prepare installation media
The location of your USB drive can be determined by =dmesg= (right
after insterting it) or by =lsblk=.
#+BEGIN_SRC shell
# dd bs=4M if=/path/to/archlinux.iso of=/dev/sdx status=progress && sync
#+END_SRC

The =sync= is there to make sure all data is written to the drive
prior to removing it from your computer.

* Booting from the installation media
So the USB drive has been prepared, so connect it to the MacBook Air
and power cycle the laptop. Just before the mac is booting you must
press the right 'option' key (alt) until the boot menu is shown. It
should at least show your normal `Macintosh HD' and an extra `EFI
Boot', the latter being the Arch Linux installer. Select it using the
arrow keys and press =enter=. Arch will boot!

After a few seconds a shell is shown, I'm automatically logged into
the installer as =root=. Since we're on Mac, it should have booted in
EFI mode, lets check:
#+BEGIN_SRC shell
# ls /sys/firmware/efi/efivars
#+END_SRC

If this directory doens't exist, it'll have booted in BIOS mode.

The Arch Linux wiki now suggests working on the network configuration,
but since I'm on wifi on a Mac, I prefer to do that later.

** Partition the USB drive
Now I'm going to prepare the USB drive that I'm going to use for
Arch. It's a 64GB SanDisk Extreme drive, connected via USB 3.0, it
won't be as fast as the Mac's internal SSD but that's ok.

The Arch Linux wiki has a lot of information on disk encryption, check
[[https://wiki.archlinux.org/index.php/Disk_encryption][here]]. I'm going to use dm-crypt together with LVM. There are basically
two ways to go about this:
1. install LVM on top of the encryption layer.
2. create an encyption layer on top of LVM.
Since I'm using a single USB drive on which Arch is going to be
installed, I'll choose the somewhat easer approach (the first one). 

The following partitions will be put on the drive:
- EFI System Partition (ESP) [512M]
- Linux filesystem [1G, /boot]
- LVM [57G]
  - swap [4G]
  - root [53G]

I use gdisk for the partitioning.
#+BEGIN_SRC shell
# gdisk /dev/sdb
#+END_SRC

Create the partitions, in my case the result is:
| Number | Start (sector) | End (sector) | Size       | Code | Name             |
|--------+----------------+--------------+------------+------+------------------|
|      1 |             34 |      1048609 | 512.0 MiB  | EF00 | EFI System       |
|      2 |        1048610 |      3145761 | 1024.0 MiB | 8300 | Linux filesystem |
|      3 |        3145762 |    122544482 | 56.9 GiB   | 8E00 | Linux LVM        |

The EFI System partition has to be formatted as FAT32. Do this like so:

#+BEGIN_SRC shell
# mkfs.fat -F32 /dev/sdb1
#+END_SRC

The Arch Linux [[https://wiki.archlinux.org/index.php/EFI_System_Partition][wiki]] talks about [[https://wiki.archlinux.org/index.php/EFISTUB][EFISTUB]] under the `Mount the
partition' heading. To my understanding this is an alternative to a
/conventional/ bootloader like =grub=. I'll not use it, so I won't be
mounting the ESP partition directly to =/boot=.

Now we can create the LVM on LUKS setup. First we prepare the
disk. The following command *irrevocably erases* data on the partition:
#+BEGIN_SRC shell
# cryptsetup luksFormat /dev/sdb3
#+END_SRC

Enter a [[https://wiki.archlinux.org/index.php/Security#Passwords][strong]] passphrase.

Now open the container:
#+BEGIN_SRC shell
# cryptsetup open --type luks /dev/sdb3 lvm
#+END_SRC
The decrypted container should now be available under
=/dev/mapper/lvm=.

** Make logical volumes with LVM
#+BEGIN_SRC shell
# pvcreate /dev/mapper/lvm
#+END_SRC
It should say ``Physical volume "/dev/mapper/lvm" successfully
created.'' Now create a volume group:
#+BEGIN_SRC shell
# vgcreate macbookair-vg /dev/mapper/lvm
#+END_SRC
It should say ``Volume group "macbookair-vg" successfully created''.
Create logical volumes:
#+BEGIN_SRC shell
# lvcreate -L 4G macbookair-vg -n swap
# lvcreate -l 100%FREE macbookair-vg -n root
#+END_SRC
This will create a logical volume of 4G for swap and a 53G logical
volume for the root. Note that my macbook has 8G RAM on board, so
that's plenty most of the times. Therefore adding 4G to the virtual
memory is more than enough (and I want to save some space on the flash
drive).

Format the second partition (that's going to be /boot) and the new
logical volumes:
#+BEGIN_SRC shell
# mkfs.ext4 /dev/mapper/macbookair--vg-root
# mkswap /dev/mapper/macbookair--vg-swap
#+END_SRC

Now mount the file systems:
#+BEGIN_SRC shell
# mount /dev/mapper/macbookair--vg-root /mnt
# swapon /dev/mapper/macbookair--vg-swap
#+END_SRC

Prepare the boot partition. This must be an =ext2= partition:
#+BEGIN_SRC shell
# mkfs.ext2 /dev/sdb2
# mkdir /mnt/boot
# mount /dev/sdb2 /mnt/boot
#+END_SRC
Now we can continue with the /normal/ installation procedure, until
the =mkinitcpio= step.

Edit the =/etc/pacman.d/mirrorlist= and optionally move your closest
mirrors to the top of the file. 

Now I'm pluggin' in a cable, hopefully I can get connected.! Wow, it
works!! My Thunderbolt network adapter is automagically recognized:)

** Installation and configuration
Update system clock:
#+BEGIN_SRC shell
# timedatectl set-ntp true
# timedatectl status
#+END_SRC

Now I can install the base packages:
#+BEGIN_SRC shell
# pacstrap /mnt base base-devel
#+END_SRC

Make a new fstab:
#+BEGIN_SRC shell
# genfstab -U /mnt >> /mnt/etc/fstab
#+END_SRC
We should check the result for errors, it seems ok. Now we can
=chroot= into the system.
#+BEGIN_SRC shell
# arch-chroot /mnt
#+END_SRC
Since we're in the chroot now, we can install extra packages using
=pacman=.
#+BEGIN_SRC shell
# pacman -S wireless_tools wpa_supplicant iw dialog vim
#+END_SRC

Set the time zone:
#+BEGIN_SRC shell
# ln -s /usr/share/zoneinfo/Europe/Amsterdam /etc/localtime
#+END_SRC
Run =hwclock= to generate =/etc/adjtime=.
#+BEGIN_SRC shell
# hwclock --systohc
#+END_SRC
*** Locale
Uncomment =en_US.UTF-8 UTF-8= (and other needed localizations) in
=/etc/locale.gen and generate with:
#+BEGIN_SRC shell
# locale-gen
#+END_SRC

Make a file =/etc/locale.conf= with content =LANG\=en_US.UTF-8=.

Create hostname in =/etc/hostname=. I'm choosing =macbookarch=.
Maybe add: "127.0.1.1   macbookarch.localdomain   macbookarch"

*** mkinitcpio
Now we have to modify the mkinitcpio config, since we're using lvm and
encryption. Edit =/etc/mkinitcpio.conf= and add =encrypt= and =lvm2=
to the =HOOKS= defintion.

Now we have to add a kernel parameter in the grub config, so the
parameter will always be loaded upon boot. We edit =/etc/default/grub=
and after that generate a new =grub.cfg=.

It seems that grub wasn't installed yet, let's install it now:
#+BEGIN_SRC shell
# pacman -S grub
#+END_SRC

Add the following kernel parameters to the
=GRUB_CMDLINE_LINUX_DEFAULT= line:
#+BEGIN_SRC shell
cryptdevice=UUID=your-crypt-luks-container-id:lvm
root=/dev/mapper/macbookair--vg-root
#+END_SRC

To find out the id of the LUKS container, you can do:
#+BEGIN_SRC shell
# ls -l /dev/disk/by-id | grep CRYPT
#+END_SRC

Now regenerate the new grub config:
#+BEGIN_SRC shell
# grub-mkconfig -o /boot/grub/grub.cfg
#+END_SRC

I got a lot of warnings, ``Failed to connect to lvmetad'', don't think
it's a problem though.

Now we're ready to create a new /initramfs/:
#+BEGIN_SRC shell
# mkinitcpio -p linux
#+END_SRC

Set the root passwd:
#+BEGIN_SRC shell
# passwd
#+END_SRC
